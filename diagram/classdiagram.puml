@startuml classdiagram


class CircuitSimulator{
    + run() : void
}

class Circuit <singleton>{
    - mInstance : Circuit
    - mMapVertexes : map<string,Vertex>
    - Circuit() : void
    + getInstance() : Circuit
    + runSim() : void
}

class FileToGraph <Template Method> {
    - mInputFile : FILE

    - openFile() : void
    - closeFile() : void
    - readVertex() : map<string, Vertex>
    - readEdge() : map<string,string>
    - getNumConfigs();
    + getGraph(map<string, string>& aVertexMap, map<strng,string>& aEdgeMap) : void 
    ' vertexMap :first string name of vertex second string type

}

'TODO interface voor verschillende strategies
'TODO check of hierby dependency injection van toepassing is

interface FileStrategy {
    - openFile() : virtual void
    - closeFile() : virtual void
    - readVertex() : virtual map<string, Vertex>
    - readEdge() : virtual map<string,string>
}

class TextStrategy <Strategy 1> {
}

class ResultToFile {
    - mOutputFile : FILE

    - openFile() : void
    - closeFile() : void
    - writeSingle(map<string, Vertex>&): void
    - writeMultiple(map<string, Vertex>&): void
    + writeOutput(map<string, Vertex>&) : void
}

class CircuitInitializer{
    - mInputs : vertex*[]

    + setInputs(ertex>)
}

class OrGate{

}

class AndGate{

}

class NorGate{

}

class NandGate{

}

class XorGate{

}

class NotGate{

}

class Vertex <Observer> {
    + setInput(unsigned aIndex, bool aValue) virtual : void
    + getOutput() virtual : int
    + setAmountInputs(int aInputs) virtual : void

    + addSubscriber(Vertex *) : void
    + removeSubscriber(Vertex *) : void
    + notifySubscribers() : void
    
    + update() : void

    - subscribers : Vertex[]
    - *mInput : int
    - mOutput : int
    - mAmountInputs : int

    - mMinInputs : const unsigned
    - mMaxInputs : const unsigned
}

class Input {
    - mValue : int

    + Input(bool aStartValue) : void
    + setInput(int aIndex, bool aValue) override : void
    + getInput() : int
}

class Probe {
    - mValue : int

    + setInput(int aIndex, bool aValue) override : void
    + getInput() : int
}

class VertexFactory <Factory method> {
    + createVertex()
}

class GraphBuilder {
    ' The createGraph function takes a multimap of two strings, where the first string is the name of a vertex and the seconds string is the type, so for example <"gate1","OR">. It uses these to fill the map in Circuit with <"nameOfVertex",Vertex>
    ' It also takes a multimap of strings, where the first string is the output of one vertex and the second string is the input of another vertex which should be connected. It is a multimap because the IDs are not unique.
    + createGraph(map<String, String>, multimap<String, String>) : void
    ' The populateCircuit function fills the map in Circuit, by inserting the names of the vertices and then creating the Vertex using the factory and also inserting that into the Circuit map
    - populateCircuit(map<String, String>) : void
    - connectVertices(multimap<String, String>) : void
}

VertexFactory --> GraphBuilder
Vertex --> GraphBuilder
Circuit --> GraphBuilder
Circuit --* Vertex
VertexFactory --> Vertex

FileToGraph *-- FileStrategy
TextStrategy --|> FileStrategy

CircuitSimulator <-- FileToGraph
CircuitSimulator <-- ResultToFile
CircuitSimulator <-- Circuit
CircuitSimulator <-- CircuitInitializer

OrGate --|> Vertex
NorGate --|> Vertex
AndGate --|> Vertex
NandGate --|> Vertex
XorGate --|> Vertex
NotGate --|> Vertex

Input --|> Vertex
Probe --|> Vertex

@enduml
